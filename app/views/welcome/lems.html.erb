<div class="overflowcontent">
<h1>Compact model specification with user-defined types</h1>
 
<h2 class="sub">A proposal for supporting models of synapses and other user-definable component types in NeuroML</h2>


 
<p class="version">Current version: 0.8.2&nbsp; 4-Nov-2011  &nbsp;&nbsp; <a href="lems.pdf">These pages as a single PDF</a>
</p>	
 
 
 
<h2>LEMS - Low Entropy Model Specification</h2>
 
 
<p>
 This proposal consists of:
 <ul>
 
<li>A <a href="introduction.html">An overview</a> of how types and models are declared</li>
    
<li>A <a href="elements.html">set of XML elements</a> for defining and using user-defined types</li>
   
    
<li>A proof-of-concept <a href="interpreter.html">interpreter</a> for processing and running models built with these elements</li>
       
<li>Some examples (left menu)
      illustrating how elements can be defined and used.</li>
       
<li>A summary of the <a href="canonical.html">canonical form</a> for a model that corresponds to the elements presented here</li>
      
    
<li>Miscellaneous <a href="discussion">discussion</a> of the objectives, design issues, benefits and weaknesses of this approach</li>
     
 
</ul>
 
</p>
 
 
<p>
    The best place to start is probably the <a href="example1.html">first example</a>. Anyone familiar with modeling and 
    model specification should be able to read the XML and make out what is going on.  
 </p>
 
<p>
    After that, feel free to download the <a href="interpreter.html">interpreter</a>, run the examples, and try constructing
     your own.
 </p>
 
<p>
    A discussion of how LEMS is being used to specify <a href="../neuroml2.php">NeuroML v2.0 ComponentTypes</a> is available <a href="../neuroml2.php">here</a>.
 </p>
  
<script type="text/javascript">
var x=0;
function togglewhat()
{
 if(x==1){
 new Effect.SlideUp('whatitdoes');
 x=0;
 document.getElementById("what_marker").innerHTML="[ show ]";
 }
 else{
 new Effect.SlideDown('whatitdoes');
 x=1;
 document.getElementById("what_marker").innerHTML="[ collapse ]";
 }
 

}
</script>
<div id="news_header">
<span id="news">What it does so far</span>
<a id="what_marker"   onclick="togglewhat();">[ show ]</a>

</div> 
<div id="whatitdoes" style="display:none;"> 
<p>
    You can define <span class="xelt">ComponentType</span>s (e.g. a "HH channel" or "a bi-exponential synapse") which express the general
    properties of a particular type of thing that goes in a model. This includes saying what parameters they have, what 
    child elements they are allowed, and how they behave (the equations).
 </p>
 
<p>
    You can then define <span class="xelt">Component</span>s based on these types by supplying values for the parameters and adding any child elements
    that are required, so, for example, a bi-exponential synapse model with rise time 1ms and decay 5ms would be a component.
 </p>
 
<p>
<span class="xelt">ComponentType</span>s can extend other <span class="xelt">ComponentType</span>s to add extra parameters, fix certain values, and otherwise
 modify their behavior. <span class="xelt">Component</span>s can extend other <span class="xelt">Component</span>s to reuse specified parameter values.
 There is also a loose notion of abstract types, so a component can accept children with a particular lineage
 without needing to know exactly what type they are. This can be used, for example, to define cells that accept 
 synaptic connections provided they have a particular signature.
 </p>
 
 
<p>Each <span class="xelt">ComponentType</span> can have a <span class="xelt">Behavior</span> element that specifies how it behaves: what the state variables are, the equations
 that govern them, and what happens when events are sent or received. 
    The interpreter takes a model consisting of type and component elements referenced from a network, builds an instance
    from them and runs it.
 </p>
 
 
<p>
    For those familiar with object oriented languages, the <span class="xelt">ComponentType</span>/<span class="xelt">Component</span> distinction is close to the normal
    Class/Instance distinction. When the model is run, the same pattern applies again, with the <span class="xelt">Component</span>s acting
    as class definitions, with their "instances" actually containing the state variables in the running mode.
 </p>
 
 
</div> 

<script type="text/javascript">
var b=0;
function togglebg()
{
 if(b==1){
 new Effect.SlideUp('background');
 b=0;
 document.getElementById("bg_marker").innerHTML="[ show ]";
 }
 else{
 new Effect.SlideDown('background');
 b=1;
 document.getElementById("bg_marker").innerHTML="[ collapse ]";
 }
 

}
</script>
<div id="news_header">
<span id="news">Background</span>
<a id="bg_marker"   onclick="togglebg();">[ show ]</a>

</div> 
<div id="background" style="display:none;">
 
<p>
    The <a href="http://www.neuroml.org/files/NeuroMLWorkshop2010.pdf">March 2010 NeuroML meeting</a> identified a need to extend the capability within NeuroML for expressing a range
    of models of synapses. It was decided that the hitherto adopted approach of defining parameterized building blocks to 
    construct models by combining blocks and setting parameters was unlikely to be flexible enough to cope with the needs 
    for synapse models. This is not obvious a-priori, since, for example, the pre NeuroML 2.0 ion channel
    building blocks are fully adequate to describe the Behavior of a wide range existing channel models. But there appears to be
     no such commonality in models used for synapses, where the mechanisms used range from highly detailed biochemical
    models to much more abstract ones.
 </p>
   
 
    
<p>
        This work also has antecedents in Catacomb 3, which was essentially a GUI for a component definition system and 
        model builder using a type system similar to that proposed here. Much of the XML processing code used in the interpreter
        was taken from <a href="http://www.neuroml.org/tool_support.php#PSICS">PSICS</a> which itself currently uses the "building block" approach to model specification.
        The need for user-defined types has been considered with respect to future PSICS development, and this proposal also
        reflects potential requirements for PSICS.
 </p>
 
</div> 
<h2>Example</h2>
 
 
<p>
 Here is the XML for a simple integrate-and-fire cell definition:
 <div class="xcode">

<div class="xcodeelement">&lt;<span class="xmlverb-element-name">ComponentType</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">refractiaf</span>"&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Parameter</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">threshold</span>" <span class="xmlverb-attr-name">dimension</span>="<span class="xmlverb-attr-content">voltage</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Parameter</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">refractoryPeriod</span>" <span class="xmlverb-attr-name">dimension</span>="<span class="xmlverb-attr-content">time</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Parameter</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">capacitance</span>" <span class="xmlverb-attr-name">dimension</span>="<span class="xmlverb-attr-content">capacitance</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Parameter</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">vleak</span>" <span class="xmlverb-attr-name">dimension</span>="<span class="xmlverb-attr-content">voltage</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Parameter</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">gleak</span>" <span class="xmlverb-attr-name">dimension</span>="<span class="xmlverb-attr-content">conductance</span>" /&gt;<span class="xmlverb-text">

&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Parameter</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">current</span>" <span class="xmlverb-attr-name">dimension</span>="<span class="xmlverb-attr-content">current</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Parameter</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">vreset</span>" <span class="xmlverb-attr-name">dimension</span>="<span class="xmlverb-attr-content">voltage</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Parameter</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">deltaV</span>" <span class="xmlverb-attr-name">dimension</span>="<span class="xmlverb-attr-content">voltage</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Parameter</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">v0</span>" <span class="xmlverb-attr-name">dimension</span>="<span class="xmlverb-attr-content">voltage</span>" /&gt;<span class="xmlverb-text">

&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">EventPort</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">out</span>" <span class="xmlverb-attr-name">direction</span>="<span class="xmlverb-attr-content">out</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">EventPort</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">in</span>" <span class="xmlverb-attr-name">direction</span>="<span class="xmlverb-attr-content">in</span>" /&gt;<span class="xmlverb-text">

&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Exposure</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">v</span>" <span class="xmlverb-attr-name">dimension</span>="<span class="xmlverb-attr-content">voltage</span>" /&gt;<span class="xmlverb-text">

</span>
<br>&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Behavior</span>&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">StateVariable</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">v</span>" <span class="xmlverb-attr-name">exposure</span>="<span class="xmlverb-attr-content">v</span>" <span class="xmlverb-attr-name">dimension</span>="<span class="xmlverb-attr-content">voltage</span>" /&gt;<span class="xmlverb-text">&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">OnStart</span>&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">StateAssignment</span> <span class="xmlverb-attr-name">variable</span>="<span class="xmlverb-attr-content">v</span>" <span class="xmlverb-attr-name">value</span>="<span class="xmlverb-attr-content">v0</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="xmlverb-element-name">OnStart</span>&gt;<span class="xmlverb-text">

&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Regime</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">refr</span>"&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">StateVariable</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">tin</span>" <span class="xmlverb-attr-name">dimension</span>="<span class="xmlverb-attr-content">time</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">OnEntry</span>&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">StateAssignment</span> <span class="xmlverb-attr-name">variable</span>="<span class="xmlverb-attr-content">tin</span>" <span class="xmlverb-attr-name">value</span>="<span class="xmlverb-attr-content">t</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">StateAssignment</span> <span class="xmlverb-attr-name">variable</span>="<span class="xmlverb-attr-content">v</span>" <span class="xmlverb-attr-name">value</span>="<span class="xmlverb-attr-content">vreset</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="xmlverb-element-name">OnEntry</span>&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">OnCondition</span> <span class="xmlverb-attr-name">test</span>="<span class="xmlverb-attr-content">t .gt. tin + refractoryPeriod</span>"&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Transition</span> <span class="xmlverb-attr-name">regime</span>="<span class="xmlverb-attr-content">int</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="xmlverb-element-name">OnCondition</span>&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="xmlverb-element-name">Regime</span>&gt;<span class="xmlverb-text">

&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Regime</span> <span class="xmlverb-attr-name">name</span>="<span class="xmlverb-attr-content">int</span>" <span class="xmlverb-attr-name">initial</span>="<span class="xmlverb-attr-content">true</span>"&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">TimeDerivative</span> <span class="xmlverb-attr-name">variable</span>="<span class="xmlverb-attr-content">v</span>" <span class="xmlverb-attr-name">value</span>="<span class="xmlverb-attr-content">(current + gleak * (vleak - v)) / capacitance</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">OnCondition</span> <span class="xmlverb-attr-name">test</span>="<span class="xmlverb-attr-content">v .gt. threshold</span>"&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">EventOut</span> <span class="xmlverb-attr-name">port</span>="<span class="xmlverb-attr-content">out</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">Transition</span> <span class="xmlverb-attr-name">regime</span>="<span class="xmlverb-attr-content">refr</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="xmlverb-element-name">OnCondition</span>&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">OnEvent</span> <span class="xmlverb-attr-name">port</span>="<span class="xmlverb-attr-content">in</span>"&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="xmlverb-element-name">StateAssignment</span> <span class="xmlverb-attr-name">variable</span>="<span class="xmlverb-attr-content">v</span>" <span class="xmlverb-attr-name">value</span>="<span class="xmlverb-attr-content">v + deltaV</span>" /&gt;<span class="xmlverb-text">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="xmlverb-element-name">OnEvent</span>&gt;<span class="xmlverb-text">

&nbsp;&nbsp;&nbsp;</span>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="xmlverb-element-name">Regime</span>&gt;<span class="xmlverb-text">
</span>
<br>&nbsp;&nbsp;&nbsp;&lt;/<span class="xmlverb-element-name">Behavior</span>&gt;<span class="xmlverb-text">

</span>
<br>&lt;/<span class="xmlverb-element-name">ComponentType</span>&gt;</div>

</div>
 
</p>
 
 
<p>
 Once this definition is available, a particular model using this structure can be specified with the following 
 XML: 
 <div class="xcode">
    
<div class="xcodeelement">&lt;<span class="xmlverb-element-name">refractiaf</span> <span class="xmlverb-attr-name">threshold</span>="<span class="xmlverb-attr-content">-40mV</span>" <span class="xmlverb-attr-name">refractoryPeriod</span>="<span class="xmlverb-attr-content">5ms</span>" <span class="xmlverb-attr-name">capacitance</span>="<span class="xmlverb-attr-content">1nF</span>" <span class="xmlverb-attr-name">vleak</span>="<span class="xmlverb-attr-content">-80mV</span>" <span class="xmlverb-attr-name">gleak</span>="<span class="xmlverb-attr-content">100pS</span>" <span class="xmlverb-attr-name">vreset</span>="<span class="xmlverb-attr-content">-70mV</span>" <span class="xmlverb-attr-name">v0</span>="<span class="xmlverb-attr-content">-70mV</span>" <span class="xmlverb-attr-name">deltaV</span>="<span class="xmlverb-attr-content">10mV</span>" /&gt;</div>
 
</div>
 
</p>


<p>
    More complex models will have nested components and other types of parameters, but the basic principle of 
    separating out the equations and parameters for reusable model components, such that the equations are 
    only stated once, remains the same.
</p>


<p>
    

</p>


</div>


</div>
</div>
